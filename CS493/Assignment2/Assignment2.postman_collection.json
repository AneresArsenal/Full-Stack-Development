{
	"info": {
		"_postman_id": "27228d73-e702-4c11-9110-5c0371a5ffb5",
		"name": "Assignment 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AuthTest",
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "queryParams",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/user",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "1. Get 30 Gists",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fba70d5f-3e06-4940-8be6-52f6d193a747",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"});   ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body  exists, so the above check is not needed",
							"});",
							"",
							"// test that 30 gists were received",
							"pm.test(\"30 gists received\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.equal(30);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/public?page=1&per_page=30",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"public"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Check individual Gist count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d4934c2-923f-45a2-8b87-a2363aeb38c8",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"});   ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"//check that gists belong to wolfordj",
							"pm.test(\"Check that all gists belong to owner 'wolfordj'\", function () {",
							"    var jsonData = pm.response.json();",
							"    for (i = 0; i<jsonData.length;i++)",
							"    {",
							"        pm.expect(jsonData[i].owner.login).to.equal('wolfordj');",
							"    }",
							"});",
							"",
							"// test to ensure at least 1 gist exists",
							"// source reference https://stackoverflow.com/questions/47385993/how-to-test-if-something-is-greater-than-certain-number-with-postman",
							"",
							"pm.test(\"Contains at least 1 gist\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.length).to.be.above(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/users/wolfordj/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"wolfordj",
						"gists"
					]
				}
			},
			"response": []
		},
		{
			"name": "3a. Get initial Gist count",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d0c4266-0922-419e-a228-e6893d88a3d8",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"}); ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"// check that gists received belong to me (AneresArsenal)",
							"// source reference https://stackoverflow.com/questions/53543208/loop-through-a-nested-json-object-to-find-a-value-id",
							"pm.test(\"Check that all gists belong to owner 'AneresArsenal'\", function () {",
							"    var jsonData = pm.response.json();",
							"    for (i = 0; i<jsonData.length;i++)",
							"    {",
							"        pm.expect(jsonData[i].owner.login).to.equal('AneresArsenal');",
							"    }",
							"});",
							"",
							"pm.test(\"Save old gist count'\", function () {",
							"    var jsonData = pm.response.json();",
							"    // source reference https://learning.getpostman.com/docs/postman/scripts/test_examples",
							"    var currentNumGist = jsonData.length;",
							"    ",
							"    pm.environment.unset(\"oldNumGist\");",
							"    pm.environment.set(\"oldNumGist\", currentNumGist);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/users/aneresarsenal/gists?oldNumGist&currentNumGist",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"aneresarsenal",
						"gists"
					],
					"query": [
						{
							"key": "oldNumGist",
							"value": null
						},
						{
							"key": "currentNumGist",
							"value": null
						}
					]
				},
				"description": "Confirm that when you create a Gist the number of Gists associated to your account increases by 1 (Hint: requires multiple requests)"
			},
			"response": []
		},
		{
			"name": "3b. Create a Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9edcb1a0-2193-48a0-9d47-3012983ab0b6",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 201 Created\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.response.to.have.status(\"Created\");",
							"}); ",
							"",
							"// check that gists received belong to me (AneresArsenal)",
							"pm.test(\"Check that gist created belong to owner 'AneresArsenal'\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.owner.login).to.equal('AneresArsenal');",
							"    pm.environment.set(\"created_gist\", jsonData.id);",
							"  ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0e8ff511-95d1-4821-a3dc-003abe37d663",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Create New Gist\",\n  \"public\": true,\n  \"files\": {\n    \"hello_world.txt\": {\n      \"content\": \"Hello World!\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists"
					]
				},
				"description": "Confirm that when you create a Gist the number of Gists associated to your account increases by 1 (Hint: requires multiple requests)"
			},
			"response": []
		},
		{
			"name": "3c. Number of Gits increase by 1 after creation",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "93b72889-a704-4e54-bf2a-895cdec8ec5d",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"}); ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"// test to make sure number of gists increased by just 1 gist after creation request",
							"pm.test(\"Check that number of Gists increased by 1'\", function () {",
							"    var oldNum = pm.environment.get(\"oldNumGist\"); ",
							"    var jsonData = pm.response.json();",
							"    var currentNum = jsonData.length;",
							"    ",
							"    pm.environment.set(\"newNumGist\", jsonData.length);",
							"    pm.expect(currentNum - oldNum).to.equal(1);",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/users/aneresarsenal/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"aneresarsenal",
						"gists"
					]
				},
				"description": "Confirm that when you create a Gist the number of Gists associated to your account increases by 1 (Hint: requires multiple requests)"
			},
			"response": []
		},
		{
			"name": "4. Contents are correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "eb660979-c81c-47d0-ae95-aaf5618cf769",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"}); ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"// test to make sure content is identical to the content sent",
							"pm.test(\"Check content is identical to the content sent'\", function () {",
							"    ",
							"    // https://postman-quick-reference-guide.readthedocs.io/en/latest/request-creation.html",
							"    ",
							"    pm.environment.set(\"file_description\", \"Create New Gist\");",
							"    pm.environment.set(\"file_public?\", true);",
							"    pm.environment.set(\"file_name\", \"hello_world.txt\");",
							"    pm.environment.set(\"file_content\", \"Hello World!\");",
							"    ",
							"    var Description = pm.environment.get(\"file_description\");",
							"    var FilePublic = pm.environment.get(\"file_public?\");",
							"    var FileName = pm.environment.get(\"file_name\");",
							"    var FileContent = pm.environment.get(\"file_content\");",
							"   ",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(Description).to.equal(jsonData.description);",
							"    pm.expect(FilePublic).to.equal(jsonData.public);",
							"    pm.expect(jsonData.files).to.have.property(FileName);",
							"    pm.expect(jsonData.files[FileName].content).to.equal(FileContent);",
							"    ",
							"    //set variable for edit gist test step",
							"    pm.environment.set(\"unedited_gist\", jsonData.id);",
							"   ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Create New Gist\",\n  \"public\": true,\n  \"files\": {\n    \"hello_world.txt\": {\n      \"content\": \"Hello World!\"\n    }\n  }\n}"
				},
				"url": {
					"raw": "https://api.github.com/gists/{{created_gist}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{created_gist}}"
					]
				},
				"description": "Confirm that the contents of the Gist you created in the previous step match the contents you sent"
			},
			"response": []
		},
		{
			"name": "5. Edit gist (edit created gist)",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8be7bfb5-a08d-445d-8027-ff8e10cdf71a",
						"exec": [
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"}); ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"// check that gist is the same gist edited",
							"pm.test(\"Check that gist is the same gist edited\", function () {",
							"    var jsonData = pm.response.json()",
							"    var gistID = pm.environment.get(\"unedited_gist\");",
							"    pm.expect(jsonData.id).to.equal(gistID);",
							"    ",
							"});",
							"",
							"// check that gist belong to me (AneresArsenal)",
							"pm.test(\"Check that gist is edited belongs to the same owner\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.owner.login).to.equal('AneresArsenal');",
							"});",
							"",
							"// test to make sure content is identical to the content sent",
							"pm.test(\"Check content is identical to the content sent'\", function () {",
							"    ",
							"    // https://postman-quick-reference-guide.readthedocs.io/en/latest/request-creation.html",
							"    ",
							"    pm.environment.set(\"file_description\", \"Edit Gist\");",
							"    pm.environment.set(\"file_public?\", true);",
							"    pm.environment.set(\"file_name\", \"hello_world.txt\");",
							"    pm.environment.set(\"file_content\", \"Hello World V2!\");",
							"    ",
							"    var Description = pm.environment.get(\"file_description\");",
							"    var FilePublic = pm.environment.get(\"file_public?\");",
							"    var FileName = pm.environment.get(\"file_name\");",
							"    var FileContent = pm.environment.get(\"file_content\");",
							"   ",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(Description).to.equal(jsonData.description);",
							"    pm.expect(FilePublic).to.equal(jsonData.public);",
							"    pm.expect(jsonData.files).to.have.property(FileName);",
							"    pm.expect(jsonData.files[FileName].content).to.equal(FileContent);",
							"    ",
							"    //to be used in star gist test",
							"    pm.environment.set(\"edited_gist\", jsonData.id);",
							"    var ID = pm.environment.get(\"edited_gist\"); ",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Edit Gist\",\n  \"public\": true,\n  \"files\": {\n    \"hello_world.txt\": {\n      \"content\": \"Hello World V2!\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/gists/{{unedited_gist}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{unedited_gist}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6a. check Gist is unstarred",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2838045-e57b-4c76-be1c-00b9e0ac12af",
						"exec": [
							"// check that gist is unstarred",
							"pm.test(\"Response status is 404 Not Found which means gist is unstarred\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.have.status(\"Not Found\");",
							"}); ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/{{edited_gist}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{edited_gist}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "6a. check Gist is not in starred list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a2838045-e57b-4c76-be1c-00b9e0ac12af",
						"exec": [
							"//check status to be ok",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"}); ",
							"",
							"",
							"//check that gist is initially unstarred and not in starred gist list",
							"pm.test(\"Starred gist is not in starred gist list\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var starredID = pm.environment.get(\"edited_gist\");",
							"    ",
							"    for (i = 0; i<jsonData.length;i++)",
							"    {",
							"        pm.expect(jsonData[i].id).to.not.equal(starredID);",
							"        console.log(jsonData[i]);",
							"    }",
							"    ",
							"}); ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"type": "text",
						"value": "{{token}}",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman."
					},
					{
						"key": "User-Agent",
						"type": "text",
						"value": "{{username}}"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/starred",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"starred"
					]
				}
			},
			"response": []
		},
		{
			"name": "6b. Star Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7a3f2a4b-ad65-49aa-bd2b-221dd7dc1b76",
						"exec": [
							"// check that gist is unstarred",
							"pm.test(\"Response status is 204 No Content which means gist is starred\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"}); ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/{{edited_gist}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{edited_gist}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Star Gists are correct",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "037d589a-0d3c-4b48-9957-44352af1a500",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"});   ",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"// ensure starred gist is included in starred gist list",
							"pm.test(\"Starred gist is included in starred gist list\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var starredID = pm.environment.get(\"edited_gist\");",
							"    pm.expect(jsonData[0].id).to.equal(starredID);",
							"}); ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/starred",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"starred"
					]
				}
			},
			"response": []
		},
		{
			"name": "8a. De-star a Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a75f08a-8259-4c9d-b3fa-4ad2b2ccb30f",
						"exec": [
							"// check that gist is unstarred",
							"pm.test(\"Response status is 204 No Content which means destar gist proccess is processed\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"}); ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/{{edited_gist}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{edited_gist}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "8b. Check if Gist is De-Starred",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2a75f08a-8259-4c9d-b3fa-4ad2b2ccb30f",
						"exec": [
							"// check that gist is unstarred",
							"pm.test(\"Response status is 404 Not Found which means gist is unstarred\", function () {",
							"    pm.response.to.have.status(404);",
							"    pm.response.to.have.status(\"Not Found\");",
							"}); ",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/{{edited_gist}}/star",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{edited_gist}}",
						"star"
					]
				}
			},
			"response": []
		},
		{
			"name": "8c. Check if gist in is starred list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7c6ab321-28b3-4d32-b952-45d3b8b39874",
						"exec": [
							"",
							"",
							"",
							"pm.test(\"Starred gist is not in starred gist list\", function () {",
							"    var jsonData = JSON.parse(responseBody);",
							"    var starredID = pm.environment.get(\"edited_gist\");",
							"    ",
							"    for (i = 0; i<jsonData.length;i++)",
							"    {",
							"        pm.expect(jsonData[i].id).to.not.equal(starredID);",
							"    }",
							"    ",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/gists/starred",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"starred"
					]
				}
			},
			"response": []
		},
		{
			"name": "9a. Delete a Gist",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aad5d639-745b-4db0-9d0e-872611334816",
						"exec": [
							"// check that gist is unstarred",
							"pm.test(\"Response status is 204 No Content which means destar gist proccess is processed\", function () {",
							"    pm.response.to.have.status(204);",
							"    pm.response.to.have.status(\"No Content\");",
							"}); ",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{username}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/gists/{{edited_gist}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"gists",
						"{{edited_gist}}"
					],
					"query": [
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "9b. Check gist is deleted",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c76bf1c4-2852-43a8-851e-6316bf7a14ec",
						"exec": [
							"// test to make sure response is good",
							"pm.test(\"Response status is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.status(\"OK\");",
							"});  ",
							"",
							"",
							"//test response is a valid response",
							"pm.test(\"Response is valid\", function () {",
							"     // assert that the status code is 200",
							"     pm.response.to.be.ok; // info, success, redirection, clientError,  serverError, are other variants",
							"     // assert that the response has a valid JSON body",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json; // this assertion also checks if a body exists, so the above check is not needed",
							"});",
							"",
							"",
							"",
							"// test to make sure number of gists decreased by just 1 gist after delete request",
							"pm.test(\"Check that number of Gists increased by 1'\", function () {",
							"    var oldNum = pm.environment.get(\"newNumGist\"); ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    var currentNum = jsonData.length;",
							"",
							"    pm.expect(currentNum - oldNum).to.equal(-1);",
							"    ",
							"});",
							"",
							"// test to make sure gist does not exist",
							"pm.test(\"Check that gist does not exist anymore in user's gist list\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    var deletedGist = pm.environment.get(\"edited_gist\");",
							"    ",
							"    for (i = 0; i < jsonData.length; i++)",
							"    {",
							"        var gistTest = jsonData[0].id;",
							"        pm.expect(gistTest).to.not.equal(deletedGist);",
							"    }",
							"",
							"    ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "oauth2",
					"oauth2": [
						{
							"key": "accessToken",
							"value": "{{token}}",
							"type": "string"
						},
						{
							"key": "tokenType",
							"value": "bearer",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "{{token}}",
						"type": "text"
					},
					{
						"key": "User-Agent",
						"value": "{{username}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.github.com/users/aneresarsenal/gists",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"aneresarsenal",
						"gists"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}